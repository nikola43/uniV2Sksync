/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "SelfPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfPermit__factory>;
    getContractFactory(
      name: "SyncSwapQuoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapQuoting__factory>;
    getContractFactory(
      name: "SyncSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapRouter__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Balance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Balance__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20WithMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithMetadata__factory>;
    getContractFactory(
      name: "IERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithPermit__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IBasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePoolFactory__factory>;
    getContractFactory(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolFactory__factory>;
    getContractFactory(
      name: "ICallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallback__factory>;
    getContractFactory(
      name: "IStakingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingPool__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManager__factory>;
    getContractFactory(
      name: "IFeeRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeRecipient__factory>;
    getContractFactory(
      name: "IFeeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeRegistry__factory>;
    getContractFactory(
      name: "IForwarderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarderRegistry__factory>;
    getContractFactory(
      name: "IPoolMaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolMaster__factory>;
    getContractFactory(
      name: "IBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePool__factory>;
    getContractFactory(
      name: "IClassicPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClassicPool__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IStablePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStablePool__factory>;
    getContractFactory(
      name: "ISyncSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncSwapFactory__factory>;
    getContractFactory(
      name: "ISyncSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncSwapPair__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IPSMVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPSMVerifier__factory>;
    getContractFactory(
      name: "ISyncPSM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncPSM__factory>;
    getContractFactory(
      name: "ISyncStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncStaking__factory>;
    getContractFactory(
      name: "ISyncSwapFeeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncSwapFeeReceiver__factory>;
    getContractFactory(
      name: "ISyncSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyncSwapRouter__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Base__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit2__factory>;
    getContractFactory(
      name: "IERC20PermitAllowed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitAllowed__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IFlashLoan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoan__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20Permit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Readonly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Readonly__factory>;
    getContractFactory(
      name: "ERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithPermit__factory>;
    getContractFactory(
      name: "FeeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeRegistry__factory>;
    getContractFactory(
      name: "ForwarderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderRegistry__factory>;
    getContractFactory(
      name: "SyncSwapFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapFeeManager__factory>;
    getContractFactory(
      name: "SyncSwapFeeRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapFeeRecipient__factory>;
    getContractFactory(
      name: "SyncSwapPoolMaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapPoolMaster__factory>;
    getContractFactory(
      name: "BasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolFactory__factory>;
    getContractFactory(
      name: "SyncSwapClassicPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapClassicPool__factory>;
    getContractFactory(
      name: "SyncSwapClassicPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapClassicPoolFactory__factory>;
    getContractFactory(
      name: "SyncSwapStablePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapStablePool__factory>;
    getContractFactory(
      name: "SyncSwapStablePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapStablePoolFactory__factory>;
    getContractFactory(
      name: "SyncSwapDutchAuction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapDutchAuction__factory>;
    getContractFactory(
      name: "SyncSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapFactory__factory>;
    getContractFactory(
      name: "SyncSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapPair__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "SyncSwapFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapFarm__factory>;
    getContractFactory(
      name: "SyncSwapFeeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapFeeReceiver__factory>;
    getContractFactory(
      name: "SyncPSM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncPSM__factory>;
    getContractFactory(
      name: "SyncStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncStaking__factory>;
    getContractFactory(
      name: "SyncSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapRouter__factory>;
    getContractFactory(
      name: "DeflatingERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeflatingERC20__factory>;
    getContractFactory(
      name: "RouterEventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterEventEmitter__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestERC20Permit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20Permit2__factory>;
    getContractFactory(
      name: "TestWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWETH9__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "SyncSwapVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyncSwapVault__factory>;
    getContractFactory(
      name: "VaultFlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultFlashLoans__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "SelfPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfPermit>;
    getContractAt(
      name: "SyncSwapQuoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapQuoting>;
    getContractAt(
      name: "SyncSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapRouter>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Balance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Balance>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20WithMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20WithMetadata>;
    getContractAt(
      name: "IERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20WithPermit>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IBasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePoolFactory>;
    getContractAt(
      name: "IPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolFactory>;
    getContractAt(
      name: "ICallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallback>;
    getContractAt(
      name: "IStakingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingPool>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManager>;
    getContractAt(
      name: "IFeeRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeRecipient>;
    getContractAt(
      name: "IFeeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeRegistry>;
    getContractAt(
      name: "IForwarderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarderRegistry>;
    getContractAt(
      name: "IPoolMaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolMaster>;
    getContractAt(
      name: "IBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePool>;
    getContractAt(
      name: "IClassicPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClassicPool>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IStablePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStablePool>;
    getContractAt(
      name: "ISyncSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncSwapFactory>;
    getContractAt(
      name: "ISyncSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncSwapPair>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IPSMVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPSMVerifier>;
    getContractAt(
      name: "ISyncPSM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncPSM>;
    getContractAt(
      name: "ISyncStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncStaking>;
    getContractAt(
      name: "ISyncSwapFeeReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncSwapFeeReceiver>;
    getContractAt(
      name: "ISyncSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyncSwapRouter>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Base>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Permit2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit2>;
    getContractAt(
      name: "IERC20PermitAllowed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitAllowed>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IFlashLoan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoan>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20Permit2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Readonly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Readonly>;
    getContractAt(
      name: "ERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithPermit>;
    getContractAt(
      name: "FeeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeRegistry>;
    getContractAt(
      name: "ForwarderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderRegistry>;
    getContractAt(
      name: "SyncSwapFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapFeeManager>;
    getContractAt(
      name: "SyncSwapFeeRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapFeeRecipient>;
    getContractAt(
      name: "SyncSwapPoolMaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapPoolMaster>;
    getContractAt(
      name: "BasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolFactory>;
    getContractAt(
      name: "SyncSwapClassicPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapClassicPool>;
    getContractAt(
      name: "SyncSwapClassicPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapClassicPoolFactory>;
    getContractAt(
      name: "SyncSwapStablePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapStablePool>;
    getContractAt(
      name: "SyncSwapStablePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapStablePoolFactory>;
    getContractAt(
      name: "SyncSwapDutchAuction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapDutchAuction>;
    getContractAt(
      name: "SyncSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapFactory>;
    getContractAt(
      name: "SyncSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapPair>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "SyncSwapFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapFarm>;
    getContractAt(
      name: "SyncSwapFeeReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapFeeReceiver>;
    getContractAt(
      name: "SyncPSM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncPSM>;
    getContractAt(
      name: "SyncStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncStaking>;
    getContractAt(
      name: "SyncSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapRouter>;
    getContractAt(
      name: "DeflatingERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeflatingERC20>;
    getContractAt(
      name: "RouterEventEmitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterEventEmitter>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestERC20Permit2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20Permit2>;
    getContractAt(
      name: "TestWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWETH9>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "SyncSwapVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyncSwapVault>;
    getContractAt(
      name: "VaultFlashLoans",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultFlashLoans>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
