/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SyncSwapFeeManagerInterface extends utils.Interface {
  functions: {
    "defaultProtocolFee(uint16)": FunctionFragment;
    "defaultSwapFee(uint16)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getFeeRecipient()": FunctionFragment;
    "getProtocolFee(address)": FunctionFragment;
    "getSwapFee(address,address,address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolProtocolFee(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultProtocolFee(uint16,uint24)": FunctionFragment;
    "setDefaultSwapFee(uint16,uint24)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setPoolProtocolFee(address,uint24)": FunctionFragment;
    "setTokenSwapFee(address,address,uint24)": FunctionFragment;
    "tokenSwapFee(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "defaultProtocolFee"
      | "defaultSwapFee"
      | "feeRecipient"
      | "getFeeRecipient"
      | "getProtocolFee"
      | "getSwapFee"
      | "owner"
      | "poolProtocolFee"
      | "renounceOwnership"
      | "setDefaultProtocolFee"
      | "setDefaultSwapFee"
      | "setFeeRecipient"
      | "setPoolProtocolFee"
      | "setTokenSwapFee"
      | "tokenSwapFee"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "defaultProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolProtocolFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultProtocolFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSwapFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSwapFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSwapFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetDefaultProtocolFee(uint16,uint24)": EventFragment;
    "SetDefaultSwapFee(uint16,uint24)": EventFragment;
    "SetFeeRecipient(address,address)": EventFragment;
    "SetPoolProtocolFee(address,uint24)": EventFragment;
    "SetTokenSwapFee(address,address,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultSwapFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenSwapFee"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetDefaultProtocolFeeEventObject {
  poolType: number;
  fee: number;
}
export type SetDefaultProtocolFeeEvent = TypedEvent<
  [number, number],
  SetDefaultProtocolFeeEventObject
>;

export type SetDefaultProtocolFeeEventFilter =
  TypedEventFilter<SetDefaultProtocolFeeEvent>;

export interface SetDefaultSwapFeeEventObject {
  poolType: number;
  fee: number;
}
export type SetDefaultSwapFeeEvent = TypedEvent<
  [number, number],
  SetDefaultSwapFeeEventObject
>;

export type SetDefaultSwapFeeEventFilter =
  TypedEventFilter<SetDefaultSwapFeeEvent>;

export interface SetFeeRecipientEventObject {
  previousFeeRecipient: string;
  newFeeRecipient: string;
}
export type SetFeeRecipientEvent = TypedEvent<
  [string, string],
  SetFeeRecipientEventObject
>;

export type SetFeeRecipientEventFilter = TypedEventFilter<SetFeeRecipientEvent>;

export interface SetPoolProtocolFeeEventObject {
  pool: string;
  fee: number;
}
export type SetPoolProtocolFeeEvent = TypedEvent<
  [string, number],
  SetPoolProtocolFeeEventObject
>;

export type SetPoolProtocolFeeEventFilter =
  TypedEventFilter<SetPoolProtocolFeeEvent>;

export interface SetTokenSwapFeeEventObject {
  tokenIn: string;
  tokenOut: string;
  fee: number;
}
export type SetTokenSwapFeeEvent = TypedEvent<
  [string, string, number],
  SetTokenSwapFeeEventObject
>;

export type SetTokenSwapFeeEventFilter = TypedEventFilter<SetTokenSwapFeeEvent>;

export interface SyncSwapFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SyncSwapFeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultProtocolFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    defaultSwapFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { fee: number }>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { fee: number }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolProtocolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultProtocolFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultSwapFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolProtocolFee(
      pool: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenSwapFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenSwapFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  defaultProtocolFee(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  defaultSwapFee(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getProtocolFee(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getSwapFee(
    pool: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolProtocolFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultProtocolFee(
    poolType: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultSwapFee(
    poolType: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolProtocolFee(
    pool: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenSwapFee(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenSwapFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    defaultProtocolFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    defaultSwapFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolProtocolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultProtocolFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultSwapFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolProtocolFee(
      pool: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenSwapFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenSwapFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetDefaultProtocolFee(uint16,uint24)"(
      poolType?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetDefaultProtocolFeeEventFilter;
    SetDefaultProtocolFee(
      poolType?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetDefaultProtocolFeeEventFilter;

    "SetDefaultSwapFee(uint16,uint24)"(
      poolType?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetDefaultSwapFeeEventFilter;
    SetDefaultSwapFee(
      poolType?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): SetDefaultSwapFeeEventFilter;

    "SetFeeRecipient(address,address)"(
      previousFeeRecipient?: PromiseOrValue<string> | null,
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;
    SetFeeRecipient(
      previousFeeRecipient?: PromiseOrValue<string> | null,
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;

    "SetPoolProtocolFee(address,uint24)"(
      pool?: PromiseOrValue<string> | null,
      fee?: null
    ): SetPoolProtocolFeeEventFilter;
    SetPoolProtocolFee(
      pool?: PromiseOrValue<string> | null,
      fee?: null
    ): SetPoolProtocolFeeEventFilter;

    "SetTokenSwapFee(address,address,uint24)"(
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      fee?: null
    ): SetTokenSwapFeeEventFilter;
    SetTokenSwapFee(
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      fee?: null
    ): SetTokenSwapFeeEventFilter;
  };

  estimateGas: {
    defaultProtocolFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultSwapFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolProtocolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultProtocolFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultSwapFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolProtocolFee(
      pool: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenSwapFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenSwapFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultProtocolFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSwapFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolProtocolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultProtocolFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultSwapFee(
      poolType: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolProtocolFee(
      pool: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenSwapFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenSwapFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
