/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SyncSwapRouter {
  export type TokenInputStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenInputStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export declare namespace IRouter {
  export type SplitPermitParamsStruct = {
    token: PromiseOrValue<string>;
    approveAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SplitPermitParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    token: string;
    approveAmount: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
  };

  export type ArrayPermitParamsStruct = {
    approveAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type ArrayPermitParamsStructOutput = [BigNumber, BigNumber, string] & {
    approveAmount: BigNumber;
    deadline: BigNumber;
    signature: string;
  };

  export type SwapStepStruct = {
    pool: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    callback: PromiseOrValue<string>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type SwapStepStructOutput = [string, string, string, string] & {
    pool: string;
    data: string;
    callback: string;
    callbackData: string;
  };

  export type SwapPathStruct = {
    steps: IRouter.SwapStepStruct[];
    tokenIn: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
  };

  export type SwapPathStructOutput = [
    IRouter.SwapStepStructOutput[],
    string,
    BigNumber
  ] & {
    steps: IRouter.SwapStepStructOutput[];
    tokenIn: string;
    amountIn: BigNumber;
  };
}

export declare namespace IPool {
  export type TokenAmountStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface SyncSwapRouterInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,(address,uint256)[],bytes,uint256,address,bytes)": FunctionFragment;
    "addLiquidity2(address,(address,uint256)[],bytes,uint256,address,bytes)": FunctionFragment;
    "addLiquidityWithPermit(address,(address,uint256)[],bytes,uint256,address,bytes,(address,uint256,uint256,uint8,bytes32,bytes32)[])": FunctionFragment;
    "addLiquidityWithPermit2(address,(address,uint256)[],bytes,uint256,address,bytes,(address,uint256,uint256,uint8,bytes32,bytes32)[])": FunctionFragment;
    "burnLiquidity(address,uint256,bytes,uint256[],address,bytes)": FunctionFragment;
    "burnLiquiditySingle(address,uint256,bytes,uint256,address,bytes)": FunctionFragment;
    "burnLiquiditySingleWithPermit(address,uint256,bytes,uint256,address,bytes,(uint256,uint256,bytes))": FunctionFragment;
    "burnLiquidityWithPermit(address,uint256,bytes,uint256[],address,bytes,(uint256,uint256,bytes))": FunctionFragment;
    "createPool(address,bytes)": FunctionFragment;
    "enteredPools(address,uint256)": FunctionFragment;
    "enteredPoolsLength(address)": FunctionFragment;
    "isPoolEntered(address,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermit2(address,uint256,uint256,bytes)": FunctionFragment;
    "selfPermit2IfNecessary(address,uint256,uint256,bytes)": FunctionFragment;
    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "stake(address,address,uint256,address)": FunctionFragment;
    "swap(((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256)": FunctionFragment;
    "swapWithPermit(((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "vault()": FunctionFragment;
    "wETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidity2"
      | "addLiquidityWithPermit"
      | "addLiquidityWithPermit2"
      | "burnLiquidity"
      | "burnLiquiditySingle"
      | "burnLiquiditySingleWithPermit"
      | "burnLiquidityWithPermit"
      | "createPool"
      | "enteredPools"
      | "enteredPoolsLength"
      | "isPoolEntered"
      | "multicall"
      | "selfPermit"
      | "selfPermit2"
      | "selfPermit2IfNecessary"
      | "selfPermitAllowed"
      | "selfPermitAllowedIfNecessary"
      | "selfPermitIfNecessary"
      | "stake"
      | "swap"
      | "swapWithPermit"
      | "vault"
      | "wETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      SyncSwapRouter.TokenInputStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity2",
    values: [
      PromiseOrValue<string>,
      SyncSwapRouter.TokenInputStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityWithPermit",
    values: [
      PromiseOrValue<string>,
      SyncSwapRouter.TokenInputStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IRouter.SplitPermitParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityWithPermit2",
    values: [
      PromiseOrValue<string>,
      SyncSwapRouter.TokenInputStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IRouter.SplitPermitParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquiditySingle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquiditySingleWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IRouter.ArrayPermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquidityWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IRouter.ArrayPermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enteredPools",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enteredPoolsLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolEntered",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit2IfNecessary",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowedIfNecessary",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitIfNecessary",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      IRouter.SwapPathStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWithPermit",
    values: [
      IRouter.SwapPathStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IRouter.SplitPermitParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityWithPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquiditySingleWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enteredPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enteredPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfPermit2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermit2IfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowedIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;

  events: {};
}

export interface SyncSwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SyncSwapRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidity2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityWithPermit2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnLiquidity(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnLiquiditySingle(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnLiquiditySingleWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      _factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enteredPools(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    enteredPoolsLength(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isPoolEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermit(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermit2(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermit2IfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermitAllowed(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermitAllowedIfNecessary(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selfPermitIfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      stakingPool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapWithPermit(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      permit: IRouter.SplitPermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    wETH(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    pool: PromiseOrValue<string>,
    inputs: SyncSwapRouter.TokenInputStruct[],
    data: PromiseOrValue<BytesLike>,
    minLiquidity: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidity2(
    pool: PromiseOrValue<string>,
    inputs: SyncSwapRouter.TokenInputStruct[],
    data: PromiseOrValue<BytesLike>,
    minLiquidity: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityWithPermit(
    pool: PromiseOrValue<string>,
    inputs: SyncSwapRouter.TokenInputStruct[],
    data: PromiseOrValue<BytesLike>,
    minLiquidity: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    permits: IRouter.SplitPermitParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityWithPermit2(
    pool: PromiseOrValue<string>,
    inputs: SyncSwapRouter.TokenInputStruct[],
    data: PromiseOrValue<BytesLike>,
    minLiquidity: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    permits: IRouter.SplitPermitParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnLiquidity(
    pool: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    minAmounts: PromiseOrValue<BigNumberish>[],
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnLiquiditySingle(
    pool: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    minAmount: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnLiquiditySingleWithPermit(
    pool: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    minAmount: PromiseOrValue<BigNumberish>,
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    permit: IRouter.ArrayPermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnLiquidityWithPermit(
    pool: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    minAmounts: PromiseOrValue<BigNumberish>[],
    callback: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    permit: IRouter.ArrayPermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    _factory: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enteredPools(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  enteredPoolsLength(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isPoolEntered(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermit(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermit2(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermit2IfNecessary(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermitAllowed(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermitAllowedIfNecessary(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selfPermitIfNecessary(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    stakingPool: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    onBehalf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    paths: IRouter.SwapPathStruct[],
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapWithPermit(
    paths: IRouter.SwapPathStruct[],
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    permit: IRouter.SplitPermitParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  wETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityWithPermit2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnLiquidity(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput[]>;

    burnLiquiditySingle(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput>;

    burnLiquiditySingleWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput>;

    burnLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput[]>;

    createPool(
      _factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    enteredPools(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    enteredPoolsLength(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    selfPermit(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermit2(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermit2IfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitAllowed(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitAllowedIfNecessary(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitIfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      stakingPool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput>;

    swapWithPermit(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      permit: IRouter.SplitPermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<IPool.TokenAmountStructOutput>;

    vault(overrides?: CallOverrides): Promise<string>;

    wETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidity2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityWithPermit2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnLiquidity(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnLiquiditySingle(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnLiquiditySingleWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      _factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enteredPools(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enteredPoolsLength(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermit(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermit2(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermit2IfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermitAllowed(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermitAllowedIfNecessary(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selfPermitIfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      stakingPool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapWithPermit(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      permit: IRouter.SplitPermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityWithPermit2(
      pool: PromiseOrValue<string>,
      inputs: SyncSwapRouter.TokenInputStruct[],
      data: PromiseOrValue<BytesLike>,
      minLiquidity: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permits: IRouter.SplitPermitParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquidity(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquiditySingle(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquiditySingleWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmount: PromiseOrValue<BigNumberish>,
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquidityWithPermit(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      minAmounts: PromiseOrValue<BigNumberish>[],
      callback: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      permit: IRouter.ArrayPermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      _factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enteredPools(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enteredPoolsLength(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermit(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermit2(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermit2IfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitAllowed(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitAllowedIfNecessary(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitIfNecessary(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      stakingPool: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapWithPermit(
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      permit: IRouter.SplitPermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
