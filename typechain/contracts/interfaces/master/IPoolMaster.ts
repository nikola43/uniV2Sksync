/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IPoolMasterInterface extends utils.Interface {
  functions: {
    "createPool(address,bytes)": FunctionFragment;
    "feeManager()": FunctionFragment;
    "getFeeRecipient()": FunctionFragment;
    "getPool(bytes32)": FunctionFragment;
    "getProtocolFee(address)": FunctionFragment;
    "getSwapFee(address,address,address,address,bytes)": FunctionFragment;
    "isFactoryWhitelisted(address)": FunctionFragment;
    "isForwarder(address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "poolsLength()": FunctionFragment;
    "registerPool(address,uint16,bytes)": FunctionFragment;
    "setFactoryWhitelisted(address,bool)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "setForwarderRegistry(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPool"
      | "feeManager"
      | "getFeeRecipient"
      | "getPool"
      | "getProtocolFee"
      | "getSwapFee"
      | "isFactoryWhitelisted"
      | "isForwarder"
      | "isPool"
      | "pools"
      | "poolsLength"
      | "registerPool"
      | "setFactoryWhitelisted"
      | "setFeeManager"
      | "setForwarderRegistry"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isFactoryWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryWhitelisted",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setForwarderRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFactoryWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForwarderRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "RegisterPool(address,address,uint16,bytes)": EventFragment;
    "SetFactoryWhitelisted(address,bool)": EventFragment;
    "UpdateFeeManager(address)": EventFragment;
    "UpdateForwarderRegistry(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisterPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFactoryWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateForwarderRegistry"): EventFragment;
}

export interface RegisterPoolEventObject {
  factory: string;
  pool: string;
  poolType: number;
  data: string;
}
export type RegisterPoolEvent = TypedEvent<
  [string, string, number, string],
  RegisterPoolEventObject
>;

export type RegisterPoolEventFilter = TypedEventFilter<RegisterPoolEvent>;

export interface SetFactoryWhitelistedEventObject {
  factory: string;
  whitelisted: boolean;
}
export type SetFactoryWhitelistedEvent = TypedEvent<
  [string, boolean],
  SetFactoryWhitelistedEventObject
>;

export type SetFactoryWhitelistedEventFilter =
  TypedEventFilter<SetFactoryWhitelistedEvent>;

export interface UpdateFeeManagerEventObject {
  newFeeManager: string;
}
export type UpdateFeeManagerEvent = TypedEvent<
  [string],
  UpdateFeeManagerEventObject
>;

export type UpdateFeeManagerEventFilter =
  TypedEventFilter<UpdateFeeManagerEvent>;

export interface UpdateForwarderRegistryEventObject {
  newForwarderRegistry: string;
}
export type UpdateForwarderRegistryEvent = TypedEvent<
  [string],
  UpdateForwarderRegistryEventObject
>;

export type UpdateForwarderRegistryEventFilter =
  TypedEventFilter<UpdateForwarderRegistryEvent>;

export interface IPoolMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isFactoryWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerPool(
      pool: PromiseOrValue<string>,
      poolType: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactoryWhitelisted(
      factory: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManager(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setForwarderRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  createPool(
    factory: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getFeeRecipient(overrides?: CallOverrides): Promise<string>;

  getPool(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProtocolFee(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getSwapFee(
    pool: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  isFactoryWhitelisted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  registerPool(
    pool: PromiseOrValue<string>,
    poolType: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactoryWhitelisted(
    factory: PromiseOrValue<string>,
    whitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeManager(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setForwarderRegistry(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createPool(
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getFeeRecipient(overrides?: CallOverrides): Promise<string>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    isFactoryWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      pool: PromiseOrValue<string>,
      poolType: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactoryWhitelisted(
      factory: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setForwarderRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RegisterPool(address,address,uint16,bytes)"(
      factory?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      poolType?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): RegisterPoolEventFilter;
    RegisterPool(
      factory?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      poolType?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): RegisterPoolEventFilter;

    "SetFactoryWhitelisted(address,bool)"(
      factory?: PromiseOrValue<string> | null,
      whitelisted?: null
    ): SetFactoryWhitelistedEventFilter;
    SetFactoryWhitelisted(
      factory?: PromiseOrValue<string> | null,
      whitelisted?: null
    ): SetFactoryWhitelistedEventFilter;

    "UpdateFeeManager(address)"(
      newFeeManager?: PromiseOrValue<string> | null
    ): UpdateFeeManagerEventFilter;
    UpdateFeeManager(
      newFeeManager?: PromiseOrValue<string> | null
    ): UpdateFeeManagerEventFilter;

    "UpdateForwarderRegistry(address)"(
      newForwarderRegistry?: PromiseOrValue<string> | null
    ): UpdateForwarderRegistryEventFilter;
    UpdateForwarderRegistry(
      newForwarderRegistry?: PromiseOrValue<string> | null
    ): UpdateForwarderRegistryEventFilter;
  };

  estimateGas: {
    createPool(
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFactoryWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      pool: PromiseOrValue<string>,
      poolType: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactoryWhitelisted(
      factory: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeManager(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setForwarderRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFee(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFee(
      pool: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFactoryWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      pool: PromiseOrValue<string>,
      poolType: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryWhitelisted(
      factory: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setForwarderRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
