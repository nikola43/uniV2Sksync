/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ICallback {
  export type BaseBurnCallbackParamsStruct = {
    sender: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    balance0: PromiseOrValue<BigNumberish>;
    balance1: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    amount0: PromiseOrValue<BigNumberish>;
    amount1: PromiseOrValue<BigNumberish>;
    withdrawMode: PromiseOrValue<BigNumberish>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type BaseBurnCallbackParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    sender: string;
    to: string;
    balance0: BigNumber;
    balance1: BigNumber;
    liquidity: BigNumber;
    totalSupply: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    withdrawMode: number;
    callbackData: string;
  };

  export type BaseBurnSingleCallbackParamsStruct = {
    sender: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    balance0: PromiseOrValue<BigNumberish>;
    balance1: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    amount0: PromiseOrValue<BigNumberish>;
    amount1: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    amountSwapped: PromiseOrValue<BigNumberish>;
    feeIn: PromiseOrValue<BigNumberish>;
    swapFee: PromiseOrValue<BigNumberish>;
    withdrawMode: PromiseOrValue<BigNumberish>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type BaseBurnSingleCallbackParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string
  ] & {
    sender: string;
    to: string;
    tokenIn: string;
    tokenOut: string;
    balance0: BigNumber;
    balance1: BigNumber;
    liquidity: BigNumber;
    totalSupply: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    amountOut: BigNumber;
    amountSwapped: BigNumber;
    feeIn: BigNumber;
    swapFee: number;
    withdrawMode: number;
    callbackData: string;
  };

  export type BaseMintCallbackParamsStruct = {
    sender: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    reserve0: PromiseOrValue<BigNumberish>;
    reserve1: PromiseOrValue<BigNumberish>;
    balance0: PromiseOrValue<BigNumberish>;
    balance1: PromiseOrValue<BigNumberish>;
    amount0: PromiseOrValue<BigNumberish>;
    amount1: PromiseOrValue<BigNumberish>;
    fee0: PromiseOrValue<BigNumberish>;
    fee1: PromiseOrValue<BigNumberish>;
    newInvariant: PromiseOrValue<BigNumberish>;
    oldInvariant: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    swapFee: PromiseOrValue<BigNumberish>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type BaseMintCallbackParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    sender: string;
    to: string;
    reserve0: BigNumber;
    reserve1: BigNumber;
    balance0: BigNumber;
    balance1: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    fee0: BigNumber;
    fee1: BigNumber;
    newInvariant: BigNumber;
    oldInvariant: BigNumber;
    totalSupply: BigNumber;
    liquidity: BigNumber;
    swapFee: number;
    callbackData: string;
  };

  export type BaseSwapCallbackParamsStruct = {
    sender: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    reserve0: PromiseOrValue<BigNumberish>;
    reserve1: PromiseOrValue<BigNumberish>;
    balance0: PromiseOrValue<BigNumberish>;
    balance1: PromiseOrValue<BigNumberish>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    feeIn: PromiseOrValue<BigNumberish>;
    swapFee: PromiseOrValue<BigNumberish>;
    withdrawMode: PromiseOrValue<BigNumberish>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type BaseSwapCallbackParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string
  ] & {
    sender: string;
    to: string;
    tokenIn: string;
    tokenOut: string;
    reserve0: BigNumber;
    reserve1: BigNumber;
    balance0: BigNumber;
    balance1: BigNumber;
    amountIn: BigNumber;
    amountOut: BigNumber;
    feeIn: BigNumber;
    swapFee: number;
    withdrawMode: number;
    callbackData: string;
  };
}

export interface ICallbackInterface extends utils.Interface {
  functions: {
    "syncSwapBaseBurnCallback((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bytes))": FunctionFragment;
    "syncSwapBaseBurnSingleCallback((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint24,uint8,bytes))": FunctionFragment;
    "syncSwapBaseMintCallback((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint24,bytes))": FunctionFragment;
    "syncSwapBaseSwapCallback((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint24,uint8,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "syncSwapBaseBurnCallback"
      | "syncSwapBaseBurnSingleCallback"
      | "syncSwapBaseMintCallback"
      | "syncSwapBaseSwapCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "syncSwapBaseBurnCallback",
    values: [ICallback.BaseBurnCallbackParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSwapBaseBurnSingleCallback",
    values: [ICallback.BaseBurnSingleCallbackParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSwapBaseMintCallback",
    values: [ICallback.BaseMintCallbackParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSwapBaseSwapCallback",
    values: [ICallback.BaseSwapCallbackParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "syncSwapBaseBurnCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncSwapBaseBurnSingleCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncSwapBaseMintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncSwapBaseSwapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICallback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICallbackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    syncSwapBaseBurnCallback(
      params: ICallback.BaseBurnCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncSwapBaseBurnSingleCallback(
      params: ICallback.BaseBurnSingleCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncSwapBaseMintCallback(
      params: ICallback.BaseMintCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncSwapBaseSwapCallback(
      params: ICallback.BaseSwapCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  syncSwapBaseBurnCallback(
    params: ICallback.BaseBurnCallbackParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncSwapBaseBurnSingleCallback(
    params: ICallback.BaseBurnSingleCallbackParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncSwapBaseMintCallback(
    params: ICallback.BaseMintCallbackParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncSwapBaseSwapCallback(
    params: ICallback.BaseSwapCallbackParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    syncSwapBaseBurnCallback(
      params: ICallback.BaseBurnCallbackParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    syncSwapBaseBurnSingleCallback(
      params: ICallback.BaseBurnSingleCallbackParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    syncSwapBaseMintCallback(
      params: ICallback.BaseMintCallbackParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    syncSwapBaseSwapCallback(
      params: ICallback.BaseSwapCallbackParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    syncSwapBaseBurnCallback(
      params: ICallback.BaseBurnCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncSwapBaseBurnSingleCallback(
      params: ICallback.BaseBurnSingleCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncSwapBaseMintCallback(
      params: ICallback.BaseMintCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncSwapBaseSwapCallback(
      params: ICallback.BaseSwapCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    syncSwapBaseBurnCallback(
      params: ICallback.BaseBurnCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncSwapBaseBurnSingleCallback(
      params: ICallback.BaseBurnSingleCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncSwapBaseMintCallback(
      params: ICallback.BaseMintCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncSwapBaseSwapCallback(
      params: ICallback.BaseSwapCallbackParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
