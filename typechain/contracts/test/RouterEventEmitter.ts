/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IRouter {
  export type SwapStepStruct = {
    pool: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    callback: PromiseOrValue<string>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type SwapStepStructOutput = [string, string, string, string] & {
    pool: string;
    data: string;
    callback: string;
    callbackData: string;
  };

  export type SwapPathStruct = {
    steps: IRouter.SwapStepStruct[];
    tokenIn: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
  };

  export type SwapPathStructOutput = [
    IRouter.SwapStepStructOutput[],
    string,
    BigNumber
  ] & {
    steps: IRouter.SwapStepStructOutput[];
    tokenIn: string;
    amountIn: BigNumber;
  };
}

export interface RouterEventEmitterInterface extends utils.Interface {
  functions: {
    "swap(address,((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "wETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "swap" | "vault" | "wETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      IRouter.SwapPathStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;

  events: {
    "Amounts(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Amounts"): EventFragment;
}

export interface AmountsEventObject {
  amount: BigNumber;
}
export type AmountsEvent = TypedEvent<[BigNumber], AmountsEventObject>;

export type AmountsEventFilter = TypedEventFilter<AmountsEvent>;

export interface RouterEventEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterEventEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      router: PromiseOrValue<string>,
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    wETH(overrides?: CallOverrides): Promise<[string]>;
  };

  swap(
    router: PromiseOrValue<string>,
    paths: IRouter.SwapPathStruct[],
    amountOutMin: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  wETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    swap(
      router: PromiseOrValue<string>,
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    wETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Amounts(uint256)"(amount?: null): AmountsEventFilter;
    Amounts(amount?: null): AmountsEventFilter;
  };

  estimateGas: {
    swap(
      router: PromiseOrValue<string>,
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      router: PromiseOrValue<string>,
      paths: IRouter.SwapPathStruct[],
      amountOutMin: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
